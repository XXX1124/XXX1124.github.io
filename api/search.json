[{"id":"1a92f1a6234cdd3e6297361a0fe26ab2","title":"安卓V/AB架构的详细分析","content":"\n\n\n\n\n\n安卓分区架构发展阶段\nonlyA→A&#x2F;B→onlyA动态分区→AB动态分区→V&#x2F;AB\n\n安卓分区的发展在安卓11上，谷歌又研究出了个新玩法：VAB架构(又称虚拟AB分区)，而出厂安卓11以上的新机型，几乎都是VAB架构，似乎是谷歌强制要求的。本章的目的是，分享我所学习、了解、熟悉到的VAB架构，分享给大家，让各位机友在玩机路上尽量少走弯路、少跑没必要的售后一日游。本章可能需要一定的玩机知识及经验，如果你看不太懂的话，说明你暂时可能还不会遇到这些问题。好了，废话不多说，我们分析VAB架构之前，我们先来了解一下安卓分区架构历年的发展，如下表格\n\n点我展开表格\nonlyA分区\n\n\n\nonlya架构(小米九)\n分区名\n逻辑分区\n\n\n\n分区一\nsystem\n-\n\n\n分区二\nvendor\n-\n\n\n分区三\nboot\n-\n\n\n分区四\ndtbo\n-\n\n\n分区五\nrecovery\n-\n\n\n分区六\nuserdata\n-\n\n\n……\n……\n……\n\n\nA&#x2F;B分区\n\n\n\nA&#x2F;B架构 (一加7pro)\n分区名\n逻辑分区\n\n\n\n分区一\nsystem_a\n\n\n\n分区二\nsystem_b\n-\n\n\n分区三\nvendor_a\n-\n\n\n分区四\nvendor_b\n-\n\n\n分区五\nboot_a\n-\n\n\n分区六\nboot_b\n-\n\n\n……\n……\n……\n\n\nonlyA动态分区\n\n\n\nonlyA动态分区(小米10)\n分区名\n逻辑分区\n\n\n\n分区一\nsuper\nsystem\n\n\n分区一\nsuper\nvendor\n\n\n分区一\nsuper\nodm\n\n\n分区一\nsuper\nproduct\n\n\n分区二\nboot\n……\n\n\n分区三\ndtbo\n……\n\n\n分区四\nrecovery\n……\n\n\n分区五\nuserdata\n……\n\n\n……\n……\n……\n\n\nAB动态分区\n\n\n\nAB动态(一加八)\n分区\n逻辑分区\n\n\n\n分区一\nsuper\nsystem_a\n\n\n分区一\nsuper\nvendor_a\n\n\n分区一\nsuper\nodm_a\n\n\n分区一\nsuper\nproduct_a\n\n\n分区一\nsuper\nsystem_b\n\n\n分区一\nsuper\nvendor_b\n\n\n分区一\nsuper\nodm_b\n\n\n分区一\nsuper\nproduct_b\n\n\n分区二\nboot_a\n……\n\n\n分区三\nboot_b\n……\n\n\n分区四\ndtbo_a\n……\n\n\n分区五\ndtbo_b\n……\n\n\n分区六\nuserdata\n……\n\n\n……\n……\n……\n\n\nvab分区\n\n\n\nvab分区\n分区名\n逻辑分区\n\n\n\n分区一\nsuper\nsystem_a\n\n\n分区一\nsuper\nvendor_a\n\n\n分区一\nsuper\nodm_a\n\n\n分区一\nsuper\nproduct_a\n\n\n分区一\nsuper\nsystem_ext_a\n\n\n分区一\nsuper\nsystem_b\n\n\n分区一\nsuper\nvendor_b\n\n\n分区一\nsuper\nodm_b\n\n\n分区一\nsuper\nproduct_b\n\n\n分区一\nsuper\nsystem_ext_b\n\n\n分区二\nboot_a\n……\n\n\n分区三\nboot_b\n……\n\n\n分区四\nvendor_boot_a\n……\n\n\n分区五\nvendor_boot_b\n……\n\n\n分区六\ndtbo_a\n……\n\n\n分区七\ndtbo_b\n……\n\n\n分区八\nuserdata\n……\n\n\n……\n……\n……\n\n\n\n\n什么是vab架构所谓的VAB架构，其实就是AB分区，套上了动态分区，再解决了AB分区的空间占用问题。上面的表格中，我列举了一些，刷机时经常会刷写的分区(system,vendor,boot,recovery等等)。userdata分区就是用户分区，格式化data就是格式化的这个分区。需要注意的是，格式化data和清空data，是两个不同的概念，经常会有小白把这两个概念搞混淆。格式化data就是把userdata的分区进行格式化操作，就像你格式化U盘一样，是格式化操作。而清空data，是删除data分区的所有文件及文件夹。当你遇到data挂载不上时，你清空data是没有效果的，这个时候，你需要进行格式化data操作，才能挂载data，所以，这两个不要搞混淆了。\nAB和VAB的相似之处的确很相似，我刚开始接触VAB的时候，也被这个现象给欺骗了，以为VAB和AB的动态分区架构基本一致，但实际上，差别太大了。仔细一点，不难看出，AB的动态分区架构，和VAB架构的不同点有两处：一是VAB架构的逻辑分区中多了两个【system_ext_a】和【system_ext_b】；VAB架构中的【system_b】、【vendor_b】、【odm_b】、【product_b】、【system_ext_b】都不是真实存在的。什么意思呢？意思就是说，不管你使用A分区，还是B分区，在挂载系统的时候，逻辑分区里面，都是挂载的_a，而不会挂载_b。是不是有点难于理解？AB的的动态分区架构中，逻辑分区里面，不管是system_a还是system_b，都是可以刷写img镜像文件的，是真实存在的，有空间大小的AB分区来回切换的时候，system_a和system_b就会被来回切换着挂载到根目录而VAB架构呢？system_a是有空间大小的，但是system_b是没有分配空间大小的(空间占用0字节)。不管你切换到A分区，还是切换到B分区，它都只会挂载system_a。这个system_b不会被使用。具体它是怎么挂载的呢，我也说不清楚，谷歌开发者文档中也没有太多的介绍，我目前是按照我自己的刷机知识及经验推论出来的，不保证是100%正确。\n以上总结\nA分区时，挂载system_a，并使用所有的_a分区。\nB分区时，将system_a重命名为system_b，同时0字节大小的system_b也重命名为system_a，挂载重命名后的system_b，并使用所有的_b分区。\n在系统内OTA更新时(假设当前是处于A分区，更新成功后为切换到B分区)，需要更新的系统补丁包，解压后存放在data分区，复制一份system_a，并重命名为system_b_tmp，放到data分区的某个隐藏目录中，将下载好的系统更新包，整合进复制出来的system_b_tmp，得到更新完整包system_b_tmp，重启手机，如果成功挂载system_b_tmp，那么就把system_b_tmp替换掉动态分区的system_a，并重命名为system_b，原本0字节的system_b重命名为system_a，并切换至b分区。更新完成。如果system_b_tmp更新失败，则不会动原有的分区，system_a分区依然原样4..VAB架构有点不太好解释，它其实和AB分区类似，有两套完整的A和B，但是在动态分区的super分区中，system,vendor等这种逻辑分区，却不像AB那样有两套，VAB它只有一套，VAB它只有一套，VAB它只有一套，VAB它只有一套，VAB它只有一套，VAB它只有一套，切换分区时，就是那一套在不断的重命名分区名而已(谷歌觉得这样能更节省空间)，这样理解就容易多了。所以，用上所述，VAB架构，不能像AB那样玩。AB分区的可以，一个A分区坏了，切换到B分区继续用。而VAB分区的话，一个A分区坏了，切换到B分区也不能继续用，因为system,vendor等这几个重要的逻辑分区，还是使用的同一个。对于VAB架构的机型来说，不要试图随便玩，因为一个分区坏了，另一个分区也是坏的\n\nvab分区的rec问题在vab架构中没有rec分区，不要试图使用命令【fastboot flash recovery twrp.img】来刷写twrp，没有任何效果的。那么既然没有rec分区，那么官方是如何在rec中更新系统的呢？答：recovery分区，被合并到了boot分区中，所以其实还是可以用rec来更新系统的。不过，我们先来讲讲boot.img包含哪些东西：一个完整的boot.img，它和这几个分区是一套的：boot(linux内核存放分区),dtbo(屏幕刷新率控制分区),recovery(小型恢复系统分区)。而这三个，在安卓11以前，都是的分别的三个不同分区，其实都是boot.img拆分出来的，被分成了3份。\n而到安卓11的时候，boot.img，里面包含了一个Linux内核【Kernel】，一个小型恢复系统【ramdisk】。但是，在这个Liunx内核中，部分配置文件又被从Kernel中，分离出来，变成了一个全新的分区【vendor_boot】，也就是说，安卓11的时候，一个完整的boot.img，变成了这几个分区：boot(linux内核存放分区),dtbo(屏幕刷新率控制分区),vendor_boot(Linux内核中的部分配置文件)\n是不是发现，没有recovery分区了？其实，它被合并到了boot分区中。说白了，twrp.img它即是boot也是recovery。也就是说，boot分区里面有两个东西：一个是Linux内核【Kernel】，一个是小型恢复系统【ramdisk】。当我们进入rec时，就是启动的【ramdisk】，当我们开机进入桌面时，就是启动的【Kernel】。所以说，【fastboot flash recovery twrp.img】来刷写twrp，没有任何效果的。要刷twrp，是要刷进boot分区的。即：【fastboot flash boot twrp.img】\n但是，你以为这就完了吗？你要是真把twrp.img刷进boot分区，那么恭喜你，成功把手机刷砖了为啥呢？不要急，先喝杯水，听我继续慢慢道来。前面说到了，一个VAB架构的boot.img，包含两个东西：Kernel和ramdisk，其中，ramdisk就是rec，Kernel就是内核。(注意ramdisk是需要Kernel来引导它启动的)而Kernel和你当前的系统，还有dtbo,vendor_boot，是配套存在的，它们之前必须要配套，不配套可能有BUG(比如wifi打不开，蓝牙没声音等等)，或者直接无法开机。而twrp.img呢，它里面也是有一个Kernel和ramdisk的，说白了，twrp.img它即是boot也是recovery。刷进boot分区，相当于你同时刷了内核Kernel和小型恢复系统ramdisk。所以，你要刷rec，不能将rec刷进boot分区。你要刷rec，不能将rec刷进boot分区。你要刷rec，不能将rec刷进boot分区。你要刷rec，不能将rec刷进boot分区。你要刷rec，不能将rec刷进boot分区。\n那么，twrp的正确安装原理是什么呢？看下面：1、首先，一个twrp.img包含：Kernel和ramdisk。2、其次，一个boot.img包含：Kernel和ramdisk。3、将twrp.img中的ramdisk，替换进boot分区，覆盖掉boot分区中的ramdisk。\n这就是正确的安装twrp方式。说人话：在fastboot中，临时加载twrp，然后就进入rec了，这个时候的boot分区并没有被刷写，所以叫做临时加载。在rec的高级中，点击安装twrp，它就会把rec中的ramdisk替换掉boot分区中的ramdisk，然后，安装完成。\n好了，本次玩机分享就到这里，希望各位机友在玩机路上少走弯路。\n","slug":"安卓","date":"2023-07-16T22:30:25.000Z","categories_index":"","tags_index":"安卓玩机","author_index":"花未眠"},{"id":"9f57799f3e5bd67964dd376a454447ae","title":"青龙多客户端部署（Win Linux Android）","content":"前言\n\n\n\n\n\n什么是青龙面板？\n青龙面板是支持 Python3、JavaScript、Shell、Typescript 的定时任务管理平台（Timed task management platform supporting Python3, JavaScript, Shell, Typescript) 本篇文章将教会你如何多端部署青龙\n\n功能\n支持多种脚本语言（python3、javaScript、shell、typescript）\n支持在线管理脚本、环境变量、配置文件\n支持在线查看任务日志\n支持秒级任务设置\n支持系统级通知\n支持暗黑模式\n支持手机端操作\n\n部署win10&#x2F;11本地部署\n\n\n\n\n\n\n\n请注意以下事项\n1.先把电脑管家、360之类的先关闭了2.电脑开启了VT虚拟化（不会自行百度我这里就不赘述了）3.桌面底部导航栏里点放大镜搜控制面板-程序-启用或关闭Windows功能里找到[适用于linux的windows子系统] [Hyper-V] [虚拟机平台] 勾选启用并重启电脑\n\n1.去docker官网下载Windows的安装包并安装点我下载\n2.下载linux内核更新包，适用于 x64 计算机的 WSL2 Linux 内核更新包点我下载\n3.以上两个都装好后再次重启电脑\n4.在D盘创建Docker文件夹，然后在Docker文件夹内创建ql文件夹，再在ql里面创建如下几个文件夹\n\nconfig\ndb\nlog\nraw\nrepo\nscripts\n\n\n拉取青龙面板1.打开安装好后的docker2.在d盘Docker目录内win+r打开cmd命令行输入如下命令\n$ docker run -dit -v\nD:&#x2F;Docker&#x2F;ql&#x2F;config:&#x2F;ql&#x2F;config -v\nD:&#x2F;Docker&#x2F;ql&#x2F;log:&#x2F;ql&#x2F;log -v D:&#x2F;Docker&#x2F;ql&#x2F;db:&#x2F;ql&#x2F;db -v\nD:&#x2F;Docker&#x2F;ql&#x2F;repo:&#x2F;ql&#x2F;repo -v\nD:&#x2F;Docker&#x2F;ql&#x2F;raw:&#x2F;ql&#x2F;raw -v\nD:&#x2F;Docker&#x2F;ql&#x2F;scripts:&#x2F;ql&#x2F;scripts -p 5700:5700 --name qinglong --hostname qinglong -e TZ&#x3D;Asia&#x2F;Shanghai --restart unless-stopped whyour&#x2F;qinglong:latest\n\n下载完成后我们去docker程序中就可以看见青龙镜像了，注意docker不要关闭\n浏览器打开：http://localhost:5700/  访问青龙面板\n至此Windows部署青龙已经彻底完成\n\n本地虚拟&#x2F;实体Linux或云服务器\n\n\n\n\n\n\n\n\n推荐小白使用宝塔面板进行部署\ndebian&#x2F;ubuntu安装宝塔面板wget -O install.sh https:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh ed8484bec\n\ncentos安装宝塔yum install -y wget &amp;&amp; wget -O install.sh https:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install_6.0.sh &amp;&amp; sh install.sh ed8484bec\n\n拉取青龙镜像1.浏览器打开宝塔面板登录后左侧软件商店内搜docker管理器下载安装\n2.还是宝塔左侧找到终端连接你的服务器或本地主机输入如下命令\ndocker run -dit \\\n  --name QL \\\n  --hostname QL \\\n  --restart always \\\n  -p 5700:5700 \\\n  -v $PWD&#x2F;QL&#x2F;config:&#x2F;ql&#x2F;config \\\n  -v $PWD&#x2F;QL&#x2F;log:&#x2F;ql&#x2F;log \\\n  -v $PWD&#x2F;QL&#x2F;db:&#x2F;ql&#x2F;db \\\n  -v $PWD&#x2F;QL&#x2F;scripts:&#x2F;ql&#x2F;scripts \\\n  -v $PWD&#x2F;QL&#x2F;jbot:&#x2F;ql&#x2F;jbot \\\n  whyour&#x2F;qinglong:latest\n  4.开放端口，宝塔左侧安全开房5700端口。如果你是云服务器用户请在自己服务器管理面板安全组添加规则开放5700端口，若是你的宝塔安装好后打不开的话自行开放宝塔相应的端口。\n5.云服务器用户浏览器输入你服务器的公网ip:5700即可访问青龙面板。本地用户用自己的局域网ip:5700访问\n至此，服务器本地linux部署完成\n\n安卓有magisk部署：\n\n\n\n\n\n面具刷入\n得益于面具的加成，有root用户只需要刷一个模块，重启后浏览器打开 127.0.0.1:5700 即可访问面板\n\n戳我下载超级无敌霹雳巨无霸青龙模块\n","slug":"青龙","date":"2023-07-09T22:30:25.000Z","categories_index":"","tags_index":"青龙,docker","author_index":"花未眠"},{"id":"a5353bec47f338e61a4e6253b9a56299","title":"米游社签到自动化脚本，支持崩坏三福利补给，原神每日签到，米游币任务，各频道升级任务。","content":"使用前请先安装第三方库\npip3 install requests\n\n使用方法\n\n\n\n\n\n\n\n\n下载源码 点我下载\n\n\n\n\n\n\n\n\n\n在config.json中的“Cookie”内填入米游社Cookie(获取cookie方法在下面)\n\n\n\n\n\n\n\n\n\n运行mhy.py输入如下命令\npython3 mhy.py\n获取cookie方法\n\n\n\n\n\n\n\n\n安卓alook浏览器\n\n下载打开alook浏览器\n先登录上自己的米游社账号 https://bbs.mihoyo.com/ys/\n然后点击下边导航栏中间三条杠的图标，往左边滑找到工具箱🧰 再点进开发者工具🛠️ 最后再点击cookies 复制cookie\n再登录 https://user.mihoyo.com/\n继续第三步的步骤复制cookie\n把第一段和第二段的ck用 ; 拼接起来。例如:\n\n我是第一次获得的ck;我是第二次获得的ck\n\n拼接好后放入下图中第二行中cookie后面的引号内\n\n\n自定义设置修改config.json以自定义需求，true为开启false为关闭注意拼写、大小写、json格式注意拼写、大小写、json格式注意拼写、大小写、json格式  \n\n&quot;Delay&quot; 控制是否启用随机延迟\n\n“Enable” 内的各项控制是否启用相关功能  \n\n&quot;BH3&quot; 控制是否自动签到『崩坏3福利补给』\n&quot;YS&quot; 控制是否自动签到『原神签到福利』\n&quot;BBS&quot; 控制是否执行『米游币任务』(包括讨论区签到)\n&quot;ChannelUpVote&quot; 控制是否执行『频道点赞任务』\n&quot;ChannelPublish&quot; 控制是否执行『频道发帖&amp;评论任务』**(实验性功能,默认关闭)**\n&quot;DeleteOldPost&quot; 控制是否删除今天之前水的帖子(仅本次更新后水的帖子有效) (实验性功能,默认关闭)\n\n\n&quot;Game_BlackList&quot; 内的为不想签到的UID (是游戏内的UID)\n\n&quot;BH3&quot; 内为『崩坏3』的UID\n&quot;YS&quot; 内为『原神』的UID\n\n\n\n","slug":"米游社","date":"2023-07-05T22:30:25.000Z","categories_index":"","tags_index":"termux,Python","author_index":"花未眠"},{"id":"4dcae41de7300198407c0630fcd15c40","title":"超简单！安卓利用mt管理器/termux搭建云崽机器人！！","content":"本教程专为手残党和只有一部手机的人打造，如果你连这篇教程都看不会的话，年轻人收手吧这不适合你！需要的东西:\n \n一部手机\n\n \nzerotermux下载地址\n\n \nmt管理器下载地址\n\n \n一双灵巧的手\n\n\n\n开始教程\n打开mt管理器或者zerotermux执行:\n\n $ curl -LO gitee.com&#x2F;TimeRainStarSky&#x2F;TRSS-MTArch&#x2F;raw&#x2F;main&#x2F;Install.sh &amp;&amp; bash Install.sh\n\n   \n注:以上完全自动化等待执行结束\n执行结束后会自己进入到如下界面根据上呀剪头来选中以上选项，这里我们选择trss-yunzai然后回车等待自动安装结束\n\n\n\n安装完成后我们选择 2启动就可以进入到启动后的界面了。到这一步你的云崽搭建完成了\n\n\n\n这里可能有人会问：搭建是搭建完成了但是怎么使用 对接到qq&#x2F;qq频道或者tg kook等一些第三方软件呢？ 问得好接下来就是重头戏 因为腾讯qq群机器人经常冻结风控于是我就对接了kook（开黑了）这个软件。首先这个界面输入#安装KOOK-Plugin后回车会自动安装对接kook的插件。如下图\n\n\n\n下载安装kook注册登录后创建一个服务器\n\n\n\n进入kook开发者网站注册机器人，点我进入  进入登陆后点右上角创建应用，名称头像随意填\n\n\n展开/收起\n7. 就入应用点击左边的邀请链接然后把权限\n都给了后点击复制链接，新窗口打开后把机器人邀请进入你的群组\n\n\n\n之后找到这个token点击复制一会用的到\n\n\n\n返回zerotermux输入 #KO设置xxx（xxx就是你刚才复制的token）后回车，这样它就会对接上了\n\n\n\n接下来进入kook你刚才创建的群组开始使用吧！\n\n一些插件可以去https://gitee.com/yhArcadia/Yunzai-Bot-plugins-index?_from=gitee_search里下载","slug":"云崽","date":"2023-07-04T20:54:25.000Z","categories_index":"","tags_index":"termux","author_index":"花未眠"}]